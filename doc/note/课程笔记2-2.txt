MVVM框架

view <--> viewModel <--> model  

视图	     通讯         数据

DOM         观察者     JavaScript对象

viewModel连接view和model的中间线，视图和数据无法直接通讯，通过viewModel来实现双向绑定。
viewModel通常要实现一个observer观察者，当数据发生变化，viewmodel能观察到数据的变化，然后通知到对应的视图实现自动更新。
而当用户操作视图，viewmodel也能监听到视图的变化，然后通知数据做改动，因此实现了数据的双向绑定。

Vue 提供了 v-model 指令，它能轻松实现表单输入和应用状态之间的双向绑定。
<div id="app-6">
  <p>{{ message }}</p>
  <input v-model="message">
</div>
var app6 = new Vue({
  el: '#app-6',
  data: {
    message: 'Hello Vue!'
  }
})

MVVM的应用场景
1 针对具有复杂交互逻辑的前端应用
2 提供基础的架构抽象
3 通过ajax数据持久化，保证前端用户体验
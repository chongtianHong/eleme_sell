详情弹层页（3）

接上一节的内容

接下来开始写样式：
.star{
    font-size: 0;
    .star-item{ // 表示每个span的基础class
        display: inline-block;
        background-repeat: no-repeat
    }
    &.star-48{} //与star同级
    &.star-36{}
    &.star-24{}
}
为 &.star-48{}、&.star-36{}、 &.star-24{}里面的.star-item设置样式。
打开设计稿，看到start48的尺寸是40×38，设置为20px×20px？
每个星星之间的横向间距是22px
且由于最后一个星星是没有margin-right的，所以要写：
&.star-48{ //与star同级
        .star-item{
            width: 20px;
            height: 20px;
            margin-right: 22px;
        }
	&:last-child{
	    margin-right: 0;
	}
    }

由于每种size的星星都有不同的3个状态，on（全星）、half（半星）和off（没星），这是由itemClass来决定的，
因此给这三种不同的状态写样式。
&.star-48{ //与star同级
        & .on{
            background: url('star48_on@2x.png');
	    background-size: cover;
        }
        & .half{
            background: url('star48_half@2x.png');
	    background-size: cover;
        }
        & .off{
            background: url('star48_off@2x.png');
	    background-size: cover;
        }
    }

其他size的星星样式差不多，代码可以复制，根据设计稿修改尺寸。

星星的样式写完了。接下来剩下最后一步，
即要将span的class动态的设置为on、half或off：
itemClass是通过遍历itemClasses得到的
依旧使用计算属性:

由于总共五颗星，所以要定义一个常量，
const LENGTH = 5;
const CLS_ON = "on";
const CLS_HALF = "half";
const CLS_OFF = "off";
使用定义常量的原因是，之后代码如果要改动的话，只需要初始化的数值即可，不需要改动所有的代码。
itemClasses是一个数组。通过分数score算出这样的一个数组。
分数通过this.score得到。
computed: {
        starType () {
            return "star-" + this.size;
        },
        itemClasses () {
            let result = [];
            let score = Math.floor(this.score * 2) / 2;
            let hasDecimal = score % 1 !== 0;
            let integer = Math.floor(score);
            for(let i=0; i < integer;i++){
                result.push(CLS_ON);
            }
            if(hasDecimal){
                result.push(CLS_HALF);
            }
            while(result.length<LENGTH){
                result.push(CLS_OFF);
            }
            return result;
        }
    }

写完代码之后，就可以将星星组件用起来，看看效果。
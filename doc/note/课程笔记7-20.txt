购物车小球动画实现（3）

记录一下用到的知识点吧，不照着做了。

触发浏览器重绘。
let rf = el.offsetHeight;
因为在vue动画实现的过程中，设置重绘之后再去设置transform才有用。

this.$nextTick(){}的作用。https://segmentfault.com/a/1190000008570874
什么是Vue.nextTick()
官方文档解释如下：
在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。
所以放在Vue.nextTick()回调函数中的执行的应该是会对DOM进行操作的 js代码

什么时候需要用到Vue.nextTick()

1.在Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中。
原因是什么呢，原因是在created()钩子函数执行的时候DOM 其实并未进行任何渲染，
而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进Vue.nextTick()的回调函数中。
与之对应的就是mounted钩子函数，因为该钩子函数执行时所有的DOM挂载和渲染都已完成，
此时在该钩子函数中进行任何DOM操作都不会有问题 。
2.在数据变化后要执行的某个操作，而这个操作需要使用随数据改变而改变的DOM结构的时候，
这个操作都应该放进Vue.nextTick()的回调函数中。


原因是，Vue是异步执行dom更新的，一旦观察到数据变化，Vue就会开启一个队列，
然后把在同一个事件循环 (event loop) 当中观察到数据变化的 watcher 推送进这个队列。
如果这个watcher被触发多次，只会被推送到队列一次。
这种缓冲行为可以有效的去掉重复数据造成的不必要的计算和DOm操作。
而在下一个事件循环时，Vue会清空队列，并进行必要的DOM更新。


当你设置 vm.someData = 'new value'，DOM 并不会马上更新，
而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的DOM更新。
如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。
为了在数据变化之后等待 Vue 完成更新 DOM ，
可以在数据变化之后立即使用 Vue.nextTick(callback) 。
这样回调函数在 DOM 更新完成后就会调用。


接下来要完成购物车组件的最后一个部分。
当点击购物车组件时，显示购物车里面的详情，同时在里面还可以进行增加或删除商品的操作。
cartcontrol组件（3）

接下来实现购物按钮的动画效果

上一小节给class=cart-decrease的div绑定了一个点击decCart方法。
decCart (event) {
      if (!event._constructed) { // 去掉自带click事件的点击
        return;
      }
      if (this.food.count) {
        this.food.count--;
      }
}

为了实现点击加号，减号按钮可以从右到左滚动过去。
因此需要两个动画效果，一个是平移，一个是滚动。同时还需要一个透明度渐变的过程。

使用vue的动画效果。
<transition name="fade">
        <div class="cart-decrease" @click="decCart" v-show="food.count>0"></div>
</transition>

.cart-decrease{
    background-image: url("jian.png");
    background-size: cover;
    transition: all .2s linear;
  }
  .cart-decrease .move-transition{
    opacity: 1;
    transform: rotateZ(0);
  }
.cart-decrease .move-enter  {
    opacity: 0;
    transform: rotateZ(180deg);
  }
实现了平移效果

接下来实现旋转效果
.cartcontrol .fade-enter-active, .fade-leave-active {
  transition: all 0.4s linear
}

.cartcontrol .fade-enter, .fade-leave-to {
  opacity: 0;
  transform :translate3d(24px, 0, 0);
  transform: rotate(180deg);
}

动画现在已经实现。

由于在子组件cartcontrol中使用Vue.set给父组件传递过来的food对象添加属性count，
当count在cartcontrol.vue中变化的时候，会自动反映到父组件goods.vue中的对应的food中。

现在在调用shopcart的时候需要传入一个selectFoods。
因此在goods组件里面写。
在这里，selectFoods也是一个计算属性。
因此在computed项中写：
selectFoods () {
      let foods = [];
      this.goods.forEach((good) => { // 每个商品大类
        good.foods.forEach((food) => {  // 商品大类中的每个商品
          if (food.count) {
            foods.push(food);
          }
        });
      });
      return foods;
}
count属性是在cartControl.vue中添加的，在子组件对父组件传递过来的数据的修改会反映到父组件上面，
所以在父组件可以对每一样good下面的每一样的food遍历，当food下面有count属性的时候，说明该food已经被添加到购物车了

然后将selectFoods传给shopcart：
<shopcart :select-foods="selectFoods" :deliveryPrice="seller.deliveryPrice" :minPrice="seller.minPrice"></shopcart>
可见就实现了商品和购物车的联动效果。

接下来实现购物车小球的动画效果。


很好的一个博客总结：https://blog.csdn.net/tangxiujiang